{"version":3,"sources":["omdb_search.ts","Movie.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OMDbAPISearch","key","title","a","page","axios","get","params","type","apikey","s","then","res","data","catch","err","console","error","OMDbAPIGetByID","id","i","plot","Movie","props","result","expanded","moreInfo","onClick","className","src","Poster","alt","Title","Released","Year","filterNA","Director","Runtime","Plot","Genre","prop","propertyName","App","state","query","responseArray","index","totalResults","expandedMovie","undefined","this","movies","map","imdbID","setState","button","length","loadMore","bind","onSubmit","handleSubmit","onChange","handleChange","placeholder","event","userQuery","target","value","preventDefault","response","Response","Error","Search","parseInt","_","idx","concat","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a3c88fe.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport interface OMDbResponse {\n    Error: string;\n    Search: Array<OMDbSearchResult>;\n    totalResults: string;\n    Response: string;\n}\n\nexport interface OMDbSearchResult {\n    Title: string;\n    Year: string;\n    imdbID: string;\n    Poster: string;\n    Type: string;\n\n}\n\nexport interface DetailedOMDbResponse {\n    Title: string;\n    Year: string;\n    Rated: string;\n    Released: string;\n    Runtime: string;\n    Genre: string;\n    Director: string;\n    Writer: string;\n    Actors: string;\n    Plot: string;\n    Language: string;\n    Country: string;\n    Awards: string;\n    Poster: string;\n    Ratings: Array<Rating>;\n    Metascore: string;\n    imdbRating: string;\n    imdbVotes: string;\n    imdbID: string;\n    Type: string;\n    DVD: string;\n    BoxOffice: string;\n    Production: string;\n    Website: string;\n    Response: string;\n}\n\nexport interface Rating {\n    Source: string;\n    Value: string;\n}\n\nasync function OMDbAPISearch(key: string, title: string, page: Number = 1): Promise<OMDbResponse> {\n    return axios.get(\"https://www.omdbapi.com/\", {\n        params: {\n            type: \"movie\",\n            apikey: key,\n            s: title,\n            page: page,\n        }\n    })\n    .then(res => {return res.data})\n    .catch(err => console.error(err));\n}\n\nasync function OMDbAPIGetByID(key: string, id: string): Promise<DetailedOMDbResponse> {\n    return axios.get(\"https://www.omdbapi.com/\", {\n        params: {\n            apikey: key,\n            i: id,\n            plot: \"short\",\n        }\n    })\n    .then(res => {return res.data})\n    .catch(err => console.error(err));\n}\n\nexport { OMDbAPISearch, OMDbAPIGetByID };\n","import React from 'react';\n//import { DetailedOMDbResponse, OMDbAPIGetByID } from './omdb_search'\n//import { key }from './key.json';\n\nexport function Movie(props: any) {\n    /*const [expanded, setExpanded] = React.useState(false);\n    const [moreInfo, setMoreInfo]\n        : [DetailedOMDbResponse | undefined, React.Dispatch<DetailedOMDbResponse | undefined>]\n        = React.useState();*/\n    /*if (moreInfo?.imdbID !== result.imdbID) {\n        setExpanded(false);\n    }*/\n    const result = props.result;\n    const expanded = props.expanded;\n    const moreInfo = props.moreInfo;\n    return (\n        <button \n            onClick={props.onClick}\n            className=\"shadow-md transition duration-500 rounded-lg bg-opacity-25 hover:bg-opacity-100 max-w-4xl md:w-1/2 w-11/12 bg-gray-400 m-4 mt-0 \">\n            <div className=\"flex flex-col\">\n                <div className=\"flex flew-row flex-auto\">\n                    <img className=\"w-20 flex-shrink-0 rounded-lg text-gray-500 italic text-center\" src={result.Poster} alt=\"no poster\" />\n                    <div className=\"flex flex-col w-full m-2\">\n                        <div className=\"flex flex-row\">\n                            <span className=\"title text-xl text-gray-700 text-left font-semibold mr-2\"> {result.Title} </span>\n                            <span className=\"year text-gray-600 text-right flex-grow\"> {(moreInfo && expanded) ? moreInfo.Released : result.Year} </span>\n                        </div>\n                        {\n                            expanded &&\n                            (\n                                <div className=\"text-md\">\n                                    <div className=\"flex flex-row flex-auto\">\n                                        <span className=\"text-left text-gray-700 font-semibold\"> {moreInfo && filterNA(moreInfo.Director, \"director\")} </span>\n                                        <span className=\"text-right flex-grow text-gray-600\"> {moreInfo && filterNA(moreInfo.Runtime, \"runtime\")} </span>\n                                    </div>\n                                </div>\n                            )\n                        }\n                    </div>\n                </div>\n                <div>\n                    { expanded && (<div className=\"text-lg m-2 mb-0 text-justify select-all\"> {moreInfo && filterNA(moreInfo.Plot, \"plot\")} </div>) }\n                    { expanded && (<span className=\"text-center text-gray-700 flex-grow\"> {moreInfo && filterNA(moreInfo.Genre, \"genre\")} </span>) }\n                </div>\n            </div>\n        </button>\n    );\n}\n\nfunction filterNA(prop: string, propertyName: string = \"\"): JSX.Element {\n    return (<span className={prop === \"N/A\" ? \"italic\" : \"\"}> {prop === \"N/A\" ? propertyName + \" not found\" : prop} </span>)\n        \n}\n","import React from 'react';\nimport { OMDbAPISearch, OMDbSearchResult, DetailedOMDbResponse, OMDbAPIGetByID } from './omdb_search';\nimport { key } from './key.json';\nimport { Movie } from './Movie';\n\ninterface AppState {\n    query: string;\n    responseArray: Array<OMDbSearchResult>;\n    index: number;\n    totalResults: number;\n    error: string;\n    expandedMovie: string | undefined;\n    moreInfo: DetailedOMDbResponse | undefined;\n}\n\nclass App extends React.Component<{}, AppState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            query: \"\",\n            responseArray: [],\n            index: 1,\n            totalResults: 0,\n            error: \"\",\n            expandedMovie: undefined,\n            moreInfo: undefined,\n        };\n    }\n\n    render() {\n        const error = this.state.error !== \"\"\n            ? (\n            <div className=\"text-gray-200 text-2xl font-semibold bg-gray-700 text-center rounded-lg\">\n                <div className=\"m-4\">\n                    { this.state.error }\n                </div>\n            </div>\n            )\n            : null;\n        const movies = this.state.responseArray\n            .map(res => (\n                <Movie\n                    key={res.imdbID}\n                    result={res}\n                    expanded={res.imdbID===this.state.expandedMovie}\n                    moreInfo={this.state.moreInfo}\n                    onClick={async () =>\n                        {\n                            this.setState({\n                                expandedMovie: res.imdbID === this.state.expandedMovie ? undefined : res.imdbID,\n                                moreInfo: res.imdbID === this.state.moreInfo?.imdbID\n                                    ? this.state.moreInfo\n                                    : await OMDbAPIGetByID(key, res.imdbID),\n                            });\n                        }\n                    }\n                />\n            ));\n        const button = this.state.responseArray.length === this.state.totalResults ?\n            null\n            : (\n                <button\n                    className=\"loadMoreButton transition duration-500 bg-opacity-60 hover:bg-opacity-100 bg-blue-400 rounded-lg mb-2 text-xl font-medium h-12 w-36 \"\n                    onClick={this.loadMore.bind(this)}>\n                    Load More\n                </button>\n            );\n\n        return (\n          <div className=\"App min-h-screen bg-gradient-to-b from-blue-200 to-purple-200\">\n            <header className=\"App-header flex flex-grow justify-center\">\n                <div className=\"w-96 m-4\">\n                    {/*\n                    <div className=\"text-center\">{\"Query: \" + this.state.query}</div>\n                    */}\n                    <form className=\"query text-center\" onSubmit={this.handleSubmit.bind(this)}>\n                        <input className=\"text-center text-2xl bg-blue-50 rounded-lg\" onChange={this.handleChange.bind(this)} placeholder=\"search a movie\" />\n                    </form>\n                </div>\n            </header>\n           <div className=\"w-auto flex flex-col items-center\">\n               { error }\n               { movies }\n               { button }\n           </div>\n          </div>\n        );\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        const userQuery = event.target.value;\n        this.setState({\n            query: userQuery,\n        });\n    }\n\n    async handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        const response = await OMDbAPISearch(key, this.state.query)\n        if (response.Response === \"False\") {\n            this.setState({\n                query: \"\",\n                responseArray: [],\n                totalResults: 0,\n                error: response.Error,\n            })\n        } else {\n            this.setState({\n                responseArray: response.Search,\n                totalResults: parseInt(response.totalResults),\n                error: \"\",\n            });\n        }\n        this.setState({\n            expandedMovie: undefined,\n            moreInfo: undefined,\n            index: 1,\n        })\n    }\n\n    async loadMore(_: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        const idx = this.state.index + 1;\n        const response = await OMDbAPISearch(key, this.state.query, idx);\n        this.setState({\n            responseArray: this.state.responseArray.concat(response.Search),\n            index: idx,\n        });\n    }\n}\n\n\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}